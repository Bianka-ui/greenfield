<?xml version="1.0" encoding="UTF-8"?>
<protocol name="dcbuffer" version="1">
    <copyright>
        Greenfield WebRTC Protocol
        Copyright (C) 2017 Erik De Rijcke

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Affero General Public License as
        published by the Free Software Foundation, either version 3 of the
        License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Affero General Public License for more details.

        You should have received a copy of the GNU Affero General Public License
        along with this program. If not, see &gt;http://www.gnu.org/licenses/&lt;.
    </copyright>

    <interface name="RtcBufferFactory" version="1">
        <description>A global dc buffer factory. Used to create and associate dc buffers with the generic buffer.
        </description>

        <request name="createBuffer">
            <description>Create a new opaque buffer</description>
            <arg name="id" type="new_id" interface="GrBuffer" summary="A new generic buffer"/>
        </request>

        <request name="createDcBuffer">
            <description>Create a dc buffer implementation for the given buffer argument.</description>
            <arg name="id" type="new_id" interface="RtcDcBuffer" summary="A new datachannel buffer"/>
            <arg name="channelId" type="uint" summary="16-bit id of the data channel"/>
            <arg name="wrtcSignaling" type="object" interface="WrtcSignaling"
                 summary="The bound wrtc signaling instance who's peer connection will be used to setup the data channel"/>
            <arg name="buffer" type="object" interface="GrBuffer"
                 summary="The generic buffer that will implement the new datachannel buffer"/>
        </request>
    </interface>

    <interface name="RtcDcBuffer" version="1">
        <description>A web rtc datachannel buffer.It's contents are communicated over an out of band udp datachannel.

            A buffer is considered to be either in the 'pending' or 'complete' state.

            A buffer's expected contents are identified through the serial argument in a syn request. The same serial
            must be issued in the buffer contents send over a separate udp datachannel. If a buffers contents matches
            the expected serial, a buffer is considered 'complete'. A buffer who's syn request does not have matching
            buffer content is considered 'pending'. A syn serial is expected to increment on each newer buffer content
            as to chronologically distinguish between arriving buffer contents.

            A committed surface with a buffer in the 'pending' state should have all of it's drawing state stored and
            should not be visually updated until the buffer goes into the 'complete' state.

            A buffer must have a size set with the size request for it to be considered 'complete'. A buffer that does
            not have a size shall remain in the 'pending' state. The latest size request is considered applicable to the
            buffer contents matching or exceeding the currently set syn serial, as such a size request should always be
            done after the earliest matching syn request and before the sending of the earliest matching buffer contents
            else races and unexpected behaviour might occur.
        </description>

        <request name="destroy" type="destructor">
            <description summary="destroy a dc buffer">
            </description>
        </request>

        <request name="syn">
            <description>The serial of the latest buffer contents that were send over the udp datachannel. This is used
                to synchronize a buffer commit with the out of band content that arrives over the udp datachannel.
            </description>
            <arg name="serial" type="uint" summary="Serial of the send buffer contents"/>
            <arg name="width" type="uint" summary="width of the send buffer contents"/>
            <arg name="height" type="uint" summary="height of the send buffer contents"/>
        </request>

        <event name="ack">
            <description>Acknowledgement of the compositor about the arrival of the buffer content. This enables the
                client have feedback of previously send buffer content.
            </description>
            <arg name="serial" type="uint" summary="Serial of the received buffer contents"/>
        </event>
    </interface>

    <interface name="RtcPeerConnection" version="1">
        <description>
            A global singleton. Sets up a web rtc peer connection.
        </description>

        <request name="clientIceCandidates" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <request name="clientSdpOffer" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <request name="clientSdpReply" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <event name="serverSdpReply" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>

        <event name="serverSdpOffer" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>

        <event name="serverIceCandidates" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>
    </interface>
</protocol>