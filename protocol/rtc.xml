<?xml version="1.0" encoding="UTF-8"?>
<protocol name="rtc" version="1">
    <copyright>
        Greenfield WebRTC Protocol
        Copyright (C) 2017 Erik De Rijcke

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Affero General Public License as
        published by the Free Software Foundation, either version 3 of the
        License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Affero General Public License for more details.

        You should have received a copy of the GNU Affero General Public License
        along with this program. If not, see &gt;http://www.gnu.org/licenses/&lt;.
    </copyright>

    <interface name="rtc_buffer_factory" version="1">
        <description>
            A global data channel buffer factory. Used to create and associate dc buffers with the generic buffer.
        </description>

        <request name="createBuffer">
            <description>Create a new opaque buffer</description>
            <arg name="id" type="new_id" interface="gr_buffer" summary="A new generic buffer"/>
        </request>

        <request name="createDcBuffer">
            <description>Create an rtc data channel buffer implementation for the given generic buffer.</description>
            <arg name="id" type="new_id" interface="rtc_dc_buffer" summary="A new data channel buffer"/>
            <arg name="blobTransfer" type="object" interface="gr_blob_transfer"
                 summary="The blob transfer used to send buffer data."/>
            <arg name="buffer" type="object" interface="GrBuffer"
                 summary="The generic buffer that will implement the new datachannel buffer"/>
        </request>
    </interface>

    <interface name="rtc_dc_buffer" version="1">
        <description>
            A web rtc data channel buffer. It's contents are communicated over a blob transfer object.

            A buffer is considered to be either in the 'pending' or 'complete' state.

            A buffer's expected contents are identified through the serial argument in a syn request. The same serial
            must be issued in the buffer contents send over a separate rtc data channel. If a buffers contents matches
            the expected serial, a buffer is considered 'complete'. A buffer who's syn request does not have matching
            buffer content is considered 'pending'. A syn serial is expected to increment on each newer buffer content
            as to chronologically distinguish between arriving buffer contents.

            A committed surface with a buffer in the 'pending' state should have all of it's drawing state stored and
            should not be visually updated until the buffer goes into the 'complete' state.
        </description>

        <request name="destroy" type="destructor">
            <description summary="destroy a dc buffer">
            </description>
        </request>

        <request name="syn">
            <description>The serial of the latest buffer contents that were send over the udp datachannel. This is used
                to synchronize a buffer commit with the out of band content that arrives over the udp datachannel.
            </description>
            <arg name="serial" type="uint" summary="Serial of the send buffer contents"/>
        </request>

        <event name="ack">
            <description>Acknowledgement of the compositor about the arrival of the buffer content. This enables the
                client have feedback of previously send buffer content.
            </description>
            <arg name="serial" type="uint" summary="Serial of the received buffer contents"/>
        </event>
    </interface>

    <interface name="rtc_peer_connection_factory" version="1">
        <description>
            Global singleton. Creates new rtc peer connections.
        </description>

        <request name="createRtcPeerConnection">
            <description>
                Creates a peer connection. A peer connection will be initialized as soon as it can be
                associated with another peer connection which is use case dependent.
            </description>
            <arg name="id" type="new_id" interface="rtc_peer_connection"
                 summary="Creates new peer connection"/>
        </request>
    </interface>

    <interface name="rtc_peer_connection" version="1">
        <description>
            Rtc peer connection object functions as a signaling mechanism to set up a web rtc peer connection.
        </description>

        <request name="createBlobTransfer">
            <description>
                Creates a blob transfer objects based on a blob transfer descriptor. A blob transfer
                descriptor is implementation specific but generally includes instructions on how to set up an rtc data
                channel, as well as a unique identifier for the blob transfer object. This allows for the server to
                create a blob descriptor and send it to the client. The client in return can use this descriptor to
                create a blob transfer object and receive data on it. Vice versa, a client can directly create a blob
                transfer object using it's own created blob descriptor, and send the whole blob transfer object over the
                wire to indicate that the server can receive data on this blob transfer object.

                The lifecycle of a blob transfer is tied to that of the rtc peer connection it was created from.
            </description>
            <arg name="id" type="new_id" interface="gr_blob_transfer"
                 summary="Returns new blob transfer object who's data will be send over the given rtc peer connection"/>
            <arg name="descriptor" type="string" summary="blob transfer descriptor"/>
        </request>

        <event name="init">
            <description summary="Start a client side connection initialization.">
                Notify the client that it should start initializing this peer connection. After initialization, this rtc
                peer connection is connected with another rtc peer connection. The other end can either be a server side
                peer connection, or a peer connection created by another client.
            </description>
        </event>

        <request name="clientIceCandidates" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <request name="clientSdpOffer" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <request name="clientSdpReply" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </request>

        <event name="serverSdpReply" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>

        <event name="serverSdpOffer" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>

        <event name="serverIceCandidates" since="1">
            <description/>
            <arg name="description" type="string" summary=""/>
        </event>

        <request name="close">
            <description>Close this peer connection</description>
        </request>
    </interface>
</protocol>